{
  "swagger": "2.0",
  "info": {
    "title": "broker/protocol/protocol.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/journals/list": {
      "post": {
        "summary": "List Journals, their JournalSpecs and current Routes.",
        "operationId": "Journal_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protocolListRequest"
            }
          }
        ],
        "tags": [
          "Journal"
        ]
      }
    },
    "/v1/journals/read": {
      "post": {
        "summary": "Read from a specific Journal.",
        "operationId": "Journal_Read",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/protocolReadResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of protocolReadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protocolReadRequest"
            }
          }
        ],
        "tags": [
          "Journal"
        ]
      }
    }
  },
  "definitions": {
    "ApplyRequestChange": {
      "type": "object",
      "properties": {
        "expectModRevision": {
          "type": "string",
          "format": "int64",
          "description": "Expected ModRevision of the current JournalSpec. If the Journal is being\ncreated, expect_mod_revision is zero."
        },
        "upsert": {
          "$ref": "#/definitions/protocolJournalSpec",
          "description": "JournalSpec to be updated (if expect_mod_revision \u003e 0) or created\n(if expect_mod_revision == 0)."
        },
        "delete": {
          "type": "string",
          "description": "Journal to be deleted. expect_mod_revision must not be zero."
        }
      },
      "description": "Change defines an insertion, update, or deletion to be applied to the set\nof JournalSpecs. Exactly one of |upsert| or |delete| must be set."
    },
    "FragmentsResponse_Fragment": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/protocolFragment"
        },
        "signedUrl": {
          "type": "string",
          "description": "SignedURL is a temporary URL at which a direct GET of the Fragment may\nbe issued, signed by the broker's credentials. Set only if the request\nspecified a SignatureTTL."
        }
      },
      "description": "Fragments of the Response."
    },
    "HeaderEtcd": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "format": "uint64",
          "description": "cluster_id is the ID of the cluster."
        },
        "memberId": {
          "type": "string",
          "format": "uint64",
          "description": "member_id is the ID of the member."
        },
        "revision": {
          "type": "string",
          "format": "int64",
          "description": "revision is the Etcd key-value store revision when the request was\napplied."
        },
        "raftTerm": {
          "type": "string",
          "format": "uint64",
          "description": "raft_term is the raft term when the request was applied."
        }
      },
      "description": "Etcd represents the effective Etcd MVCC state under which a Gazette broker\nis operating in its processing of requests and responses. Its inclusion\nallows brokers to reason about relative \"happened before\" Revision ordering\nof apparent routing conflicts in proxied or replicated requests, as well\nas enabling sanity checks over equality of Etcd ClusterId (and precluding,\nfor example, split-brain scenarios where different brokers are backed by\ndifferent Etcd clusters). Etcd is kept in sync with\netcdserverpb.ResponseHeader."
    },
    "ListResponseJournal": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/protocolJournalSpec"
        },
        "modRevision": {
          "type": "string",
          "format": "int64",
          "description": "Current ModRevision of the JournalSpec."
        },
        "route": {
          "$ref": "#/definitions/protocolRoute",
          "description": "Route of the journal, including endpoints."
        }
      },
      "description": "Journals of the response."
    },
    "ProcessSpecID": {
      "type": "object",
      "properties": {
        "zone": {
          "type": "string",
          "description": "\"Zone\" in which the process is running. Zones may be AWS, Azure, or\nGoogle Cloud Platform zone identifiers, or rack locations within a colo,\nor given some other custom meaning. Gazette will replicate across\nmultiple zones, and seeks to minimize traffic which must cross zones (for\nexample, by proxying reads to a broker in the current zone)."
        },
        "suffix": {
          "type": "string",
          "description": "Unique suffix of the process within |zone|. It is permissible for a\nsuffix value to repeat across zones, but never within zones. In practice,\nit's recommended to use a FQDN, Kubernetes Pod name, or comparable unique\nand self-describing value as the ID suffix."
        }
      },
      "description": "ID composes a zone and a suffix to uniquely identify a ProcessSpec."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protocolAppendResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/protocolStatus",
          "description": "Status of the Append RPC."
        },
        "header": {
          "$ref": "#/definitions/protocolHeader",
          "description": "Header of the response."
        },
        "commit": {
          "$ref": "#/definitions/protocolFragment",
          "description": "If status is OK, then |commit| is the Fragment which places the\ncommitted Append content within the Journal."
        },
        "registers": {
          "$ref": "#/definitions/protocolLabelSet",
          "description": "Current registers of the journal."
        },
        "totalChunks": {
          "type": "string",
          "format": "int64",
          "description": "Total number of RPC content chunks processed in this append."
        },
        "delayedChunks": {
          "type": "string",
          "format": "int64",
          "description": "Number of content chunks which were delayed by journal flow control."
        }
      },
      "description": "AppendResponse is the unary response message of the broker Append RPC."
    },
    "protocolApplyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/protocolStatus",
          "description": "Status of the Apply RPC."
        },
        "header": {
          "$ref": "#/definitions/protocolHeader",
          "description": "Header of the response."
        }
      },
      "description": "ApplyResponse is the unary response message of the broker Apply RPC."
    },
    "protocolCompressionCodec": {
      "type": "string",
      "enum": [
        "INVALID",
        "NONE",
        "GZIP",
        "ZSTANDARD",
        "SNAPPY",
        "GZIP_OFFLOAD_DECOMPRESSION"
      ],
      "default": "INVALID",
      "description": "CompressionCode defines codecs known to Gazette.\n\n - INVALID: INVALID is the zero-valued CompressionCodec, and is not a valid codec.\n - NONE: NONE encodes Fragments without any applied compression, with default suffix\n\".raw\".\n - GZIP: GZIP encodes Fragments using the Gzip library, with default suffix \".gz\".\n - ZSTANDARD: ZSTANDARD encodes Fragments using the ZStandard library, with default\nsuffix \".zst\".\n - SNAPPY: SNAPPY encodes Fragments using the Snappy library, with default suffix\n\".sz\".\n - GZIP_OFFLOAD_DECOMPRESSION: GZIP_OFFLOAD_DECOMPRESSION is the GZIP codec with additional behavior\naround reads and writes to remote Fragment stores, designed to offload\nthe work of decompression onto compatible stores. Specifically:\n * Fragments are written with a \"Content-Encoding: gzip\" header.\n * Client read requests are made with \"Accept-Encoding: identity\".\nThis can be helpful in contexts where reader IO bandwidth to the storage\nAPI is unconstrained, as the cost of decompression is offloaded to the\nstore and CPU-intensive batch readers may receive a parallelism benefit.\nWhile this codec may provide substantial read-time performance\nimprovements, it is an advanced configuration and the \"Content-Encoding\"\nheader handling can be subtle and sometimes confusing. It uses the default\nsuffix \".gzod\"."
    },
    "protocolFragment": {
      "type": "object",
      "properties": {
        "journal": {
          "type": "string",
          "description": "Journal of the Fragment."
        },
        "begin": {
          "type": "string",
          "format": "int64",
          "description": "Begin (inclusive) and end (exclusive) offset of the Fragment within the\nJournal."
        },
        "end": {
          "type": "string",
          "format": "int64"
        },
        "sum": {
          "$ref": "#/definitions/protocolSHA1Sum",
          "description": "SHA1 sum of the Fragment's content."
        },
        "compressionCodec": {
          "$ref": "#/definitions/protocolCompressionCodec",
          "description": "Codec with which the Fragment's content is compressed."
        },
        "backingStore": {
          "type": "string",
          "description": "Fragment store which backs the Fragment. Empty if the Fragment has yet to\nbe persisted and is still local to a Broker."
        },
        "modTime": {
          "type": "string",
          "format": "int64",
          "description": "Modification timestamp of the Fragment within the backing store,\nrepresented as seconds since the epoch."
        },
        "pathPostfix": {
          "type": "string",
          "description": "Path postfix under which the fragment is persisted to the store.\nThe complete Fragment store path is built from any path components of the\nbacking store, followed by the journal name, followed by the path postfix."
        }
      },
      "description": "Fragment is a content-addressed description of a contiguous Journal span,\ndefined by the [begin, end) offset range covered by the Fragment and the\nSHA1 sum of the corresponding Journal content."
    },
    "protocolFragmentsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/protocolStatus",
          "description": "Status of the Apply RPC."
        },
        "header": {
          "$ref": "#/definitions/protocolHeader",
          "description": "Header of the response."
        },
        "fragments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FragmentsResponse_Fragment"
          }
        },
        "nextPageToken": {
          "type": "string",
          "format": "int64",
          "description": "The NextPageToke value to be returned on subsequent Fragments requests. If\nthe value is zero then there are no more fragments to be returned for this\npage."
        }
      },
      "description": "FragmentsResponse is the unary response message of the broker ListFragments\nRPC."
    },
    "protocolHeader": {
      "type": "object",
      "properties": {
        "processId": {
          "$ref": "#/definitions/ProcessSpecID",
          "description": "ID of the process responsible for request processing. May be empty iff\nHeader is being used within a proxied request, and that request may be\ndispatched to any member of the Route."
        },
        "route": {
          "$ref": "#/definitions/protocolRoute",
          "description": "Route of processes specifically responsible for this RPC, or an empty Route\nif any process is capable of serving the RPC."
        },
        "etcd": {
          "$ref": "#/definitions/HeaderEtcd"
        }
      },
      "description": "Header captures metadata such as the process responsible for processing\nan RPC, and its effective Etcd state."
    },
    "protocolJournalSpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Journal."
        },
        "replication": {
          "type": "integer",
          "format": "int32",
          "description": "Desired replication of this Journal. This defines the Journal's tolerance\nto broker failures before data loss can occur (eg, a replication factor\nof three means two failures are tolerated)."
        },
        "labels": {
          "$ref": "#/definitions/protocolLabelSet",
          "description": "User-defined Labels of this JournalSpec. Two label names are reserved\nand may not be used within a JournalSpec's Labels: \"name\" and \"prefix\"."
        },
        "fragment": {
          "$ref": "#/definitions/protocolJournalSpecFragment"
        },
        "flags": {
          "type": "integer",
          "format": "int64",
          "description": "Flags of the Journal, as a combination of Flag enum values. The Flag enum\nis not used directly, as protobuf enums do not allow for or'ed bitfields."
        },
        "maxAppendRate": {
          "type": "string",
          "format": "int64",
          "description": "Maximum rate, in bytes-per-second, at which appends of this journal will\nbe processed. If zero (the default), no rate limiting is applied. A global\nrate limit still may be in effect, in which case the effective rate is the\nsmaller of the journal vs global rate."
        }
      },
      "description": "JournalSpec describes a Journal and its configuration."
    },
    "protocolJournalSpecFragment": {
      "type": "object",
      "properties": {
        "length": {
          "type": "string",
          "format": "int64",
          "description": "Target content length of each Fragment. In normal operation after\nFragments reach at least this length, they will be closed and new ones\nbegun. Note lengths may be smaller at times (eg, due to changes in\nJournal routing topology). Content length differs from Fragment file\nsize, in that the former reflects uncompressed bytes."
        },
        "compressionCodec": {
          "$ref": "#/definitions/protocolCompressionCodec",
          "description": "Codec used to compress Journal Fragments."
        },
        "stores": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Multiple stores may be specified, in which case the Journal's Fragments\nare the union of all Fragments present across all stores, and new\nFragments always persist to the first specified store. This can be\nhelpful in performing incremental migrations, where new Journal content\nis written to the new store, while content in the old store remains\navailable (and, depending on fragment_retention or recovery log pruning,\nmay eventually be removed).\n\nIf no stores are specified, the Journal is still use-able but will\nnot persist Fragments to any a backing fragment store. This allows for\nreal-time streaming use cases where reads of historical data are not\nneeded.",
          "title": "Storage backend base path for this Journal's Fragments. Must be in URL\nform, with the choice of backend defined by the scheme. The full path of\na Journal's Fragment is derived by joining the store path with the\nFragment's ContentPath. Eg, given a fragment_store of\n  \"s3://My-AWS-bucket/a/prefix\" and a JournalSpec of name \"my/journal\",\na complete Fragment path might be:\n  \"s3://My-AWS-bucket/a/prefix/my/journal/000123-000456-789abcdef.gzip"
        },
        "refreshInterval": {
          "type": "string",
          "description": "Interval of time between refreshes of remote Fragment listings from\nconfigured fragment_stores."
        },
        "retention": {
          "type": "string",
          "description": "Retention duration for historical Fragments of this Journal within the\nFragment stores. If less than or equal to zero, Fragments are retained\nindefinitely."
        },
        "flushInterval": {
          "type": "string",
          "description": "Flush interval defines a uniform UTC time segment which, when passed,\nwill prompt brokers to close and persist a fragment presently being\nwritten.\n\nFlush interval may be helpful in integrating the journal with a regularly\nscheduled batch work-flow which processes new files from the fragment\nstore and has no particular awareness of Gazette. For example, setting\nflush_interval to 3600s will cause brokers to persist their present\nfragment on the hour, every hour, even if it has not yet reached its\ntarget length. A batch work-flow running at 5 minutes past the hour is\nthen reasonably assured of seeing all events from the past hour.\n\nSee also \"gazctl journals fragments --help\" for more discussion."
        },
        "pathPostfixTemplate": {
          "type": "string",
          "description": "date={{ .Spool.FirstAppendTime.Format \"2006-01-02\" }}/hour={{\n   .Spool.FirstAppendTime.Format \"15\" }}\n\nWhich will produce a path postfix like \"date=2019-11-19/hour=22\".",
          "title": "Path postfix template is a Go template which evaluates to a partial\npath under which fragments are persisted to the store. A complete\nfragment path is constructed by appending path components from the\nfragment store, then the journal name, and then the postfix template.\nPath post-fixes can help in maintaining Hive compatible partitioning\nover fragment creation time. The fields \".Spool\" and \".JournalSpec\"\nare available for introspection in the template. For example,\nto partition on the UTC date and hour of creation, use:"
        }
      },
      "description": "Fragment is JournalSpec configuration which pertains to the creation,\npersistence, and indexing of the Journal's Fragments."
    },
    "protocolLabel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Label defines a key \u0026 value pair which can be attached to entities like\nJournalSpecs and BrokerSpecs. Labels may be used to provide identifying\nattributes which do not directly imply semantics to the core system, but\nare meaningful to users or for higher-level Gazette tools."
    },
    "protocolLabelSelector": {
      "type": "object",
      "properties": {
        "include": {
          "$ref": "#/definitions/protocolLabelSet",
          "description": "Include is Labels which must be matched for a LabelSet to be selected. If\nempty, all Labels are included. An include Label with empty (\"\") value is\nmatched by a Label of the same name having any value."
        },
        "exclude": {
          "$ref": "#/definitions/protocolLabelSet",
          "description": "Exclude is Labels which cannot be matched for a LabelSet to be selected. If\nempty, no Labels are excluded. An exclude Label with empty (\"\") value\nexcludes a Label of the same name having any value."
        }
      },
      "description": "LabelSelector defines a filter over LabelSets."
    },
    "protocolLabelSet": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolLabel"
          },
          "description": "Labels of the set. Instances must be unique and sorted over (Name, Value)."
        }
      },
      "description": "LabelSet is a collection of labels and their values."
    },
    "protocolListRequest": {
      "type": "object",
      "properties": {
        "selector": {
          "$ref": "#/definitions/protocolLabelSelector",
          "description": "Selector optionally refines the set of journals which will be enumerated.\nIf zero-valued, all journals are returned. Otherwise, only JournalSpecs\nmatching the LabelSelector will be returned. Two meta-labels \"name\" and\n\"prefix\" are additionally supported by the selector, where:\n  * name=examples/a-name will match a JournalSpec with Name\n  \"examples/a-name\"\n  * prefix=examples/ will match any JournalSpec having prefix \"examples/\".\n    The prefix Label value must end in '/'."
        }
      },
      "description": "ListRequest is the unary request message of the broker List RPC."
    },
    "protocolListResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/protocolStatus",
          "description": "Status of the List RPC."
        },
        "header": {
          "$ref": "#/definitions/protocolHeader",
          "description": "Header of the response."
        },
        "journals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListResponseJournal"
          }
        }
      },
      "description": "ListResponse is the unary response message of the broker List RPC."
    },
    "protocolReadRequest": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/protocolHeader",
          "description": "Header is attached by a proxying broker peer."
        },
        "journal": {
          "type": "string",
          "description": "Journal to be read."
        },
        "offset": {
          "type": "string",
          "format": "int64",
          "description": "Desired offset to begin reading from. Value -1 has special handling, where\nthe read is performed from the current write head. All other positive\nvalues specify a desired exact byte offset to read from. If the offset is\nnot available (eg, because it represents a portion of Journal which has\nbeen permanently deleted), the broker will return the next available\noffset. Callers should therefore always inspect the ReadResponse offset."
        },
        "block": {
          "type": "boolean",
          "description": "Whether the operation should block until content becomes available.\nOFFSET_NOT_YET_AVAILABLE is returned if a non-blocking read has no ready\ncontent."
        },
        "doNotProxy": {
          "type": "boolean",
          "description": "If do_not_proxy is true, the broker will not proxy the read to another\nbroker, or open and proxy a remote Fragment on the client's behalf."
        },
        "metadataOnly": {
          "type": "boolean",
          "description": "If metadata_only is true, the broker will respond with Journal and\nFragment metadata but not content."
        },
        "endOffset": {
          "type": "string",
          "format": "int64",
          "description": "Offset to read through. If zero, then the read end offset is unconstrained."
        }
      },
      "description": "ReadRequest is the unary request message of the broker Read RPC."
    },
    "protocolReadResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/protocolStatus",
          "description": "Status of the Read RPC."
        },
        "header": {
          "$ref": "#/definitions/protocolHeader",
          "description": "Header of the response. Accompanies the first ReadResponse of the response\nstream."
        },
        "offset": {
          "type": "string",
          "format": "int64",
          "description": "The effective offset of the read. See ReadRequest offset."
        },
        "writeHead": {
          "type": "string",
          "format": "int64",
          "description": "The offset to next be written, by the next append transaction served by\nbroker. In other words, the last offset through which content is\navailable to be read from the Journal. This is a metadata field and will\nnot be returned with a content response."
        },
        "fragment": {
          "$ref": "#/definitions/protocolFragment",
          "description": "Fragment to which the offset was mapped. This is a metadata field and will\nnot be returned with a content response."
        },
        "fragmentUrl": {
          "type": "string",
          "description": "If Fragment is remote, a URL from which it may be directly read."
        },
        "content": {
          "type": "string",
          "format": "byte",
          "description": "Content chunks of the read."
        }
      },
      "description": "* \"Metadata\" messages, which conveys the journal Fragment addressed by the\n   request which is ready to be read.\n* \"Chunk\" messages, which carry associated journal Fragment content bytes.\n\nA metadata message specifying a Fragment always precedes all \"chunks\" of the\nFragment's content. Response streams may be very long lived, having many\nmetadata and accompanying chunk messages. The reader may also block for long\nperiods of time awaiting the next metadata message (eg, if the next offset\nhasn't yet committed). However once a metadata message is read, the reader\nis assured that its associated chunk messages are immediately forthcoming.",
      "title": "ReadResponse is the streamed response message of the broker Read RPC.\nResponses messages are of two types:"
    },
    "protocolReplicateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/protocolStatus",
          "description": "Status of the Replicate RPC."
        },
        "header": {
          "$ref": "#/definitions/protocolHeader",
          "description": "Header of the response. Accompanies the first ReplicateResponse of the\nresponse stream."
        },
        "fragment": {
          "$ref": "#/definitions/protocolFragment",
          "description": "If status is PROPOSAL_MISMATCH, then |fragment| is the replica's current\njournal Fragment, and either it or |registers| will differ from the\nprimary's proposal."
        },
        "registers": {
          "$ref": "#/definitions/protocolLabelSet",
          "description": "If status is PROPOSAL_MISMATCH, then |registers| are the replica's current\njournal registers."
        }
      },
      "description": "ReplicateResponse is the streamed response message of the broker's internal\nReplicate RPC. Each message is a 1:1 response to a previously read \"proposal\"\nReplicateRequest with |acknowledge| set."
    },
    "protocolRoute": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessSpecID"
          },
          "description": "Members of the Route, ordered on ascending ProcessSpec.ID (zone, suffix)."
        },
        "primary": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the ProcessSpec serving as primary within |members|,\nor -1 of no member is currently primary."
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Endpoints of each Route member. If not empty, |endpoints| has the same\nlength and order as |members|, and captures the endpoint of each one."
        }
      },
      "description": "Route captures the current topology of an item and the processes serving it."
    },
    "protocolSHA1Sum": {
      "type": "object",
      "properties": {
        "part1": {
          "type": "string",
          "format": "uint64"
        },
        "part2": {
          "type": "string",
          "format": "uint64"
        },
        "part3": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "SHA1Sum is a 160-bit SHA1 digest."
    },
    "protocolStatus": {
      "type": "string",
      "enum": [
        "OK",
        "JOURNAL_NOT_FOUND",
        "NO_JOURNAL_PRIMARY_BROKER",
        "NOT_JOURNAL_PRIMARY_BROKER",
        "NOT_JOURNAL_BROKER",
        "INSUFFICIENT_JOURNAL_BROKERS",
        "OFFSET_NOT_YET_AVAILABLE",
        "WRONG_ROUTE",
        "PROPOSAL_MISMATCH",
        "ETCD_TRANSACTION_FAILED",
        "NOT_ALLOWED",
        "WRONG_APPEND_OFFSET",
        "INDEX_HAS_GREATER_OFFSET",
        "REGISTER_MISMATCH"
      ],
      "default": "OK",
      "description": "Status is a response status code, used universally across Gazette RPC APIs.\n\n - JOURNAL_NOT_FOUND: The named journal does not exist.\n - NO_JOURNAL_PRIMARY_BROKER: There is no current primary broker for the journal. This is a temporary\ncondition which should quickly resolve, assuming sufficient broker\ncapacity.\n - NOT_JOURNAL_PRIMARY_BROKER: The present broker is not the assigned primary broker for the journal.\n - NOT_JOURNAL_BROKER: The present broker is not an assigned broker for the journal.\n - INSUFFICIENT_JOURNAL_BROKERS: There are an insufficient number of assigned brokers for the journal\nto meet its required replication.\n - OFFSET_NOT_YET_AVAILABLE: The requested offset is not yet available. This indicates either that the\noffset has not yet been written, or that the broker is not yet aware of a\nwritten fragment covering the offset. Returned only by non-blocking reads.\n - WRONG_ROUTE: The peer disagrees with the Route accompanying a ReplicateRequest.\n - PROPOSAL_MISMATCH: The peer disagrees with the proposal accompanying a ReplicateRequest.\n - ETCD_TRANSACTION_FAILED: The Etcd transaction failed. Returned by Update RPC when an\nexpect_mod_revision of the UpdateRequest differs from the current\nModRevision of the JournalSpec within the store.\n - NOT_ALLOWED: A disallowed journal access was attempted (eg, a write where the\njournal disables writes, or read where journals disable reads).\n - WRONG_APPEND_OFFSET: The Append is refused because its requested offset is not equal\nto the furthest written offset of the journal.\n - INDEX_HAS_GREATER_OFFSET: The Append is refused because the replication pipeline tracks a smaller\njournal offset than that of the remote fragment index. This indicates\nthat journal replication consistency has been lost in the past, due to\ntoo many broker or Etcd failures.\n - REGISTER_MISMATCH: The Append is refused because a registers selector was provided with the\nrequest, but it was not matched by current register values of the journal."
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpcCode": {
          "type": "integer",
          "format": "int32"
        },
        "httpCode": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "httpStatus": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
